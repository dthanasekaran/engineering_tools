#!/bin/bash

DIR=$(readlink -f "$(dirname "${BASH_SOURCE[0]}")")
PATH=$DIR:$PATH

#
# find_pv: use find_pv to get to the sysreset PV of the IOC for rebooting.
# --> does not work. Need to know more. Maybe just use in case of gige, assuming naming convention.
#
# from EDM_LAUNCH: grep that cmd file for 'export IOC_PV'!!!
#
CAMPVFULL=""

get_included_configs()
{
if [[ $# -lt 1 ]]; then
    echo 'Need the config file path as input.'
    exit
elif [[ ! -f $1 ]]; then
    echo "$1 is not a file. You must provide a configuration file as input."
else
    INCLUDED_CFGS=$(grep include "$1" | grep -v '#' | awk '{print $2}')
fi
}

name_to_pv()
{
if [ $# -lt 2 ]; then
    echo 'need a name as input to return camera basePV and config file'
    exit
fi
CAMPVFULL=""
VIEWERCFG="$2"
# Match "-" or "_" or " ".
NAME=$(echo "$1" | sed -e 's/-/ /g' -e 's/_/ /g' -e 's/ /[-_ ]/g')
#
# The story here:
# See how many matches we have in the hutch.
# If 0, try looking in all of the hutches.
# If 1, then we're done.
# Otherwise:
# Look for a complete match, anchored on both sides.
# Look for a match anchored at the end.
# If there is more than one, return "ambiguous"
#
# Make a temp file with just the PVs and camera names that match.
tmp=/tmp/cv.$$
grep -i "$NAME" "$VIEWERCFG" | grep -v '#' | awk -F, '{ if (split($2,a,";")==1) n=$2; else n=a[2]; gsub(" ","",n); gsub(" "," ",$4); printf "%s %s\n", n, $4; }' >$tmp
c=$(wc -l <$tmp)
if [ "$c" -eq 0 ]; then
    echo "No match for $1 in $VIEWERCFG."
elif [ "$c" -eq 1 ]; then
    CAMPVFULL=$(awk '{print $1;}' <$tmp)
elif [[ $c -gt 1 ]]; then
    # OK, ambiguous.  Look for a complete match on the second word.
    if [ "$(grep -E -i -c " $NAME\$" < $tmp)" -eq 1 ]; then
	CAMPVFULL=$(grep -E -i " $NAME\$" < $tmp | awk '{print $1;}')
    # What about just a match at the end? (That is, if we are searching
    # for "yag1", prefer "mec_yag1" to "mec_yag11".)
    elif [ "$(grep -E -i -c "$NAME\$" < $tmp)" -eq 1 ]; then
	CAMPVFULL=$(grep -E -i "$NAME\$" < $tmp | awk '{print $1;}')
    else
	echo '"'"$1"'" is ambiguous:'
	awk '{print $2;}' <$tmp
    fi
fi
rm -f $tmp
if [[ -z $CAMPVFULL ]]; then
    get_included_configs "$VIEWERCFG"
    # shellcheck disable=SC2068
    for CFG in ${INCLUDED_CFGS[@]}; do
	name_to_pv "$1" "$CFG"
	if [[ -n $CAMPVFULL ]]; then
	    return
	fi
    done
fi

}

gige_num_to_name()
{
if [ $# -lt 2 ]; then
    echo 'need two arguments: hutch & number'
fi
HUTCH=${1^^}
hutch=${1,,}
VIEWERCFG=/reg/g/pcds/pyps/config/$hutch/camviewer.cfg
printf -v GIGENUM "%02d" "$2"
GIGEBASE=$HUTCH:GIGE:$GIGENUM

grep "$GIGEBASE" "$VIEWERCFG" | grep -v '#' | awk -F, '{print $4}'
}

isNum(){
if [ $# -lt 1 ]; then
    return 2
fi

case $1 in
    ''|*[!0-9]*) return 1;;
    *) return 0;;
esac
}

list_cams()
{
if [ $# -lt 1 ]; then
    echo 'need one argument: config file'
fi
get_included_configs "$1"
# shellcheck disable=SC2068
for CFG in ${INCLUDED_CFGS[@]}; do
    list_cams "$CFG"
done
# shellcheck disable=SC2013
for gige_cam in $(grep -v '#' "$1" | awk -F, '{print $4 "\n" }'); do
    echo "$gige_cam"
done

}

iocfpv() {
     grep_pv "$1" | sed -n 's/\/reg\/d\/iocData\/\(\S*\)\/iocInfo/\1/p'
}

iocinfo() {
    for ioc in $(iocfpv "$CAMPVFULL:IMAGE1"); do

        INFO=$(grep_ioc "$ioc" all | grep "id:'$ioc'")
        if [ -n "$INFO" ]; then
            iochutch=$(echo "$INFO" | cut -d'/' -f7)
        fi
    done
}

usage()
{
cat << EOF
usage: $0 [options]

start the viewer for controls cameras

OPTIONS:

-c|--cam <cam name> : camera name as in camera list or gige #
-m|--main           : bring up the edm screen
-r|--reboot         : reboot the IOC
-l|--list           : print list of cameras
-u|--rate <#>       : update rate limit in Hz (default 5)
-H|--hutch <hutch>  : use a specific hutches camviewer config file
-e|--enable         : enable camera ioc
-d|--disable        : disable camera ioc
-a|--acquire        : start acquiring images
-s|--stop           : stop acquiring images
-n|--nudge          : cycles acquistion (first stops then starts)
EOF
}

if [[ ($1 == "--help") || ($1 == "-h") ]]; then
        usage
        exit 0
fi


LIST=0
CAMNUM=0
CAM=0
RATE=5
REBOOT=0
ENABLE=0
DISABLE=0
MAINSCREEN=0
ACQUIRE=0
STOP=0
NUDGE=0
hutch="" # Initialize hutch

if ! OPTIONS=$(getopt -o lmredasnc:w:u:H: --long list,main,reboot,enable,disable,acquire,stop,nudge,cam:,wait:,rate:,hutch: -n \'"$0"\' -- "$@"); then
    echo "Terminating..." >&2
    exit 1
fi

eval set -- "$OPTIONS"

while :
do
    case "$1" in
        -l|--list)
            LIST=1
            shift
            ;;
        -c|--cam)
            CAM=$2
            shift 2
            ;;
        -u|--rate)
            RATE=$2
            shift 2
            ;;
        -H|--hutch)
            hutch=$2
            echo "HUTCH: $hutch" >&2
            shift 2
            ;;
        -m|--main)
            MAINSCREEN=1
            shift
            ;;
        -r|--reboot)
            REBOOT=1
            shift
            ;;
        -e|--enable)
            ENABLE=1
            shift
            ;;
        -d|--disable)
            DISABLE=1
            shift
            ;;
        -a|--acquire)
            ACQUIRE=1
            shift
            ;;
        -s|--stop)
            STOP=1
            shift
            ;;
        -n|--nudge)
            NUDGE=1
            shift
            ;;
        ?)
            usage
            break
            ;;
        --)
            shift
            break
            ;;
        *)
            echo "Internal Error"
            exit 1
            ;;
    esac

done

if [ $# -ge 1 ]; then
    echo "Positional arguments unsupported: $*" >&2
    usage
    exit 1
fi

if ! verify-hutch "$hutch"; then
    hutch=$(get_info --gethutch)
    if [ "$hutch" == unknown_hutch ]; then
        echo 'Unknown hutch, specify using -H option with a valid hutch name.'
        usage
        exit 1
    fi
fi

echo "Launching camViewer for $hutch."

EXE="/reg/g/pcds/pyps/config/$hutch/camviewer/run_viewer.csh"
PVLIST="/reg/g/pcds/pyps/config/$hutch/camviewer.cfg"

if [ $LIST -gt 0 ]; then
    list_cams "$PVLIST"
    exit 1
fi

if isNum "$CAM"; then
    CAMNUM=$CAM
    CAMNAME=$(gige_num_to_name "$hutch" "$CAM")
else
    CAMNAME=$CAM
    CAMNUM=-1
fi


if [ "$CAMNUM" -eq 0 ]; then
    if [ "$hutch" = "tmo" ]; then
        CAMNAME=IM2K0
    elif [ "$hutch" = "rix" ]; then
        CAMNAME=IM1K1
    elif [ "$hutch" = "kfe" ]; then
        CAMNAME=IM1K0
    elif [ "$hutch" = "xpp" ]; then
        CAMNAME=hx2_sb1_yag
    elif [ "$hutch" = "xcs" ]; then
        CAMNAME=xcs_yag2
    elif [ "$hutch" = "mfx" ]; then
        CAMNAME=mfx_dg1_yag
    elif [ "$hutch" = "cxi" ]; then
        CAMNAME=cxi_dg1_yag
    elif [ "$hutch" = "mec" ]; then
        CAMNAME=GigE_Questar1
    elif [ "$hutch" = "lfe" ]; then
        CAMNAME=xrt_spec
    elif [ "$hutch" = "ued" ]; then
        CAMNAME=ued-gige-01
    else
        CAMNAME=xtcav
    fi

fi
export EPICS_CA_MAX_ARRAY_BYTES=24000000
echo working with camera of name: "$CAMNAME"

name_to_pv "$CAMNAME" "$PVLIST"

if [ $MAINSCREEN -gt 0 ]; then
    c=$(list_cams "$PVLIST" | grep "$CAMNAME")
    if [ "$c" == '' ]; then
        echo "Camera name not found in hutch. To see which cameras you can access from your current machine use the '-l/--list' option."
	exit 1
    elif [[ "$c" =~ $CAMNAME ]] && [ "$hutch" != "$(get_info --gethutch)" ] ; then
        echo "To use camera controls, you must be on the same hutch network as your camera."
        echo "Opening read-only main screen..."
    fi
    echo 'try to get the main screen for: ' "$CAMNAME"
    echo 'start the main screen for camera base PV: ' "$CAMPVFULL"
    cmdName=$(caget -St "$CAMPVFULL":LAUNCH_EDM)
    echo calling edm main screen from: "$cmdName"
    $cmdName
    exit
fi

if [ $REBOOT -gt 0 ]; then
    echo 'reboot IOC for camera: ' "$CAMNAME"
    edmcmdName=$(caget -St "$CAMPVFULL":LAUNCH_EDM)
    IOCPV=$(grep 'export IOC_PV' "$edmcmdName" | awk '{print $2 "\n" }' | sed s/IOC_PV=/''/g)
    echo 'restart IOC last started on: ' "$(caget -t "$IOCPV":STARTTOD)"
    caput "$IOCPV":SYSRESET 1
    exit
fi

if [ $ENABLE -gt 0 ]; then
    echo "Enabling ${CAMNAME}"
    iocinfo
    imgr "$ioc" --hutch "$iochutch" --enable
    exit
fi

if [ $DISABLE -gt 0 ]; then
    echo "Disabling ${CAMNAME}"
    iocinfo
    imgr "$ioc" --hutch "$iochutch" --disable
    exit
fi

if [ $ACQUIRE -gt 0 ]; then
    echo "Starting acquisition for ${CAMNAME}"
    caput -n "$CAMPVFULL":Acquire 1
    exit
fi

if [ $STOP -gt 0 ]; then
    echo "Stopping acquisition for ${CAMNAME}"
    caput -n "$CAMPVFULL":Acquire 0
    exit
fi

if [ $NUDGE -gt 0 ]; then
    echo "Stopping and starting acquisition for ${CAMNAME}"
    caput -n "$CAMPVFULL":Acquire 0
    sleep 2
    caput -n "$CAMPVFULL":Acquire 1
    exit
fi

IS_ACQUIRING=$(caget -t -n "$CAMPVFULL":Acquire_RBV)
if isNum "$IS_ACQUIRING"; then
    if [ "$IS_ACQUIRING" -eq 0 ]; then
        echo 'start acquiring for camera ' "$CAMNAME"
        caput -n "$CAMPVFULL":Acquire 1
    fi
else
    echo 'cannot check Acquiring PV, try to open camera viewer anyways....'
fi

if [[ -z "$IS_REMOTE_SSH" ]]; then
    if [ "$hutch" == "kfe" ]; then
        echo "Not in SSH, connecting to kfe-console..." >&2
        ssh -t kfe-console "IS_REMOTE_SSH=1 $EXE --camerapv '$CAMPVFULL' --instrument '$hutch' --pvlist '$PVLIST' --rate '$RATE' ; bash"
        exit_status=$?
        echo "SSH exit status: $exit_status" >&2
        exit $exit_status
    elif [ "$hutch" == "lfe" ]; then
        echo "Not in SSH, connecting to lfe-console..." >&2
        ssh -t lfe-console "IS_REMOTE_SSH=1 $EXE --camerapv '$CAMPVFULL' --instrument '$hutch' --pvlist '$PVLIST' --rate '$RATE' ; bash"
        exit_status=$?
        echo "SSH exit status: $exit_status" >&2
        exit $exit_status
    fi
fi

# If we reach this point, we're either in an SSH session, or we don't need to SSH.
# Now, execute the camviewer.
if [ "$RATE" -gt 0 ]; then
    echo "$EXE" --camerapv "$CAMPVFULL" --instrument "$hutch" --pvlist "$PVLIST" --rate "$RATE"&
    "$EXE" --camerapv "$CAMPVFULL" --instrument  "$hutch" --pvlist "$PVLIST" --rate "$RATE"&
else
    echo "$EXE" --camerapv "$CAMPVFULL" --instrument "$hutch" --pvlist "$PVLIST" &
    "$EXE" --camerapv "$CAMPVFULL" --instrument  "$hutch" --pvlist "$PVLIST" &
fi

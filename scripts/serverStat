#! /bin/bash

names_from_name(){
    if [ $# -lt 1 ]; then
        echo 'need arguments: input IP'
    fi
    INNAME=$1
    if [[ $INNAME == *'-ipmi'* ]]; then
        INNAME=${INNAME//-ipmi/}
    elif [[ $INNAME == *'-fez'* ]]; then
        INNAME=${INNAME//-fez/}
    elif [[ $INNAME == *'-ana'* ]]; then
        INNAME=${INNAME//-ana/}
    fi
    CDSNAME=$INNAME
    CDSIP=$(netconfig search "$CDSNAME" | grep IP: | awk '{print $2}')
    if [[ -z $CDSIP ]]; then
        echo "Host ($CDSNAME) not found in netconfig, exiting..." >&2
        exit 1
    fi
    if [[ $(netconfig search "$NAME"-ipmi --brief | wc -w) -gt 0 ]]; then
        NAMEIPMI=$INNAME-ipmi
    fi
    if [[ $(netconfig search "$NAME"-fez --brief | wc -w) -gt 0 ]]; then
        FEZNAME=$INNAME-fez
        FEZIP=$(netconfig search "$FEZNAME" | grep IP: | awk '{print $2}')
    fi
}

host_from_PV(){
    if [[ $NAME == *':'* ]]  && [[ $HUTCH == 'unknown_hutch' ]]; then
        echo 'Getting info for a host of a PV currently only works on the hutch networks'
        exit 1
    fi
    if [[ ${NAME:0:3} == "${HUTCH^^}" ]]; then
        HOST=$(cainfo "$NAME" | grep Host | awk '{print $2}' | awk 'BEGIN { FS = ":"}; {print $1}' | sed s/'.pcdsn'/''/g)
        if [[ $HOST == *'disconnected'* ]]; then
            echo "PV $NAME is disconnected"
            exit 1
        fi
        echo "PV $NAME is hosted on server $HOST"
        NAME=$HOST
        DEV=$HOST
    else
        echo 'Getting info for a host of a PV currently only works on the hutch network (e.g. for MFX:xxx from the mfx network)'
        exit 1
    fi
}

usage(){
cat << EOF
usage: $0 <servername> [command]

Script to check status of servers & reboot/power cycle them using
the psipmi command

Default command is 'status', list of commands:
status  : print power status of machine, try to ping interfaces
on      : power machine on
off     : power machine off
cycle   : power cycle machine, waits 10 seconds in the off state
reset   : reset machine (ideally try that before power cycling)
console : open the ipmi console where possible
expert  : display info and run checks on server
EOF
}

DIRTMP=$(dirname  "${BASH_SOURCE[0]}")
DIR=$( cd "$DIRTMP" && pwd -P )
PATH=$PATH:$DIR

HUTCH=$(get_hutch_name)
for name in "tmo" "rix" "txi" "xpp" "xcs" "mfx" "cxi" "mec" "det"; do
    if [[ $DEV == *$name* ]]; then
        HUTCH=$name
        break
    fi
done


HOST_HAS_FEZ=$(netconfig search "$HOSTNAME"-fez --brief | wc -l)


if [[ $# -lt 2 ]]; then
    if [[ $# -lt 1 ]]; then
        usage
        exit 1
    elif [[ ($1 == "--help") || ($1 == "-h") ]]; then
        usage
        exit 0
    else
        CMD='status'
        DEV=$1
    fi
else
    if [[ $2 =~ ^(cycle|off|on|status|console|reset|expert) ]]; then
        DEV=$1
        CMD=$2
    else
        echo "serverStat: invalid option -- '$2'"
        echo "Try $0 --help for more information."
        exit 1
    fi
fi
NAME=$DEV

if [[ $NAME == *':'* ]]; then
    host_from_PV
fi

if [[ $NAME == *'172.21'* ]]; then
    ISSRV=1
    NAME=$(netconfig search "$NAME" --brief | awk '{print $1}')
    echo "$DEV is an IP for $NAME"
else
    ISSRV=$(netconfig search "$NAME" | grep 'Found' | awk '{print $2}')
fi

if [[ $NAME == *'-ipmi'* ]]; then
    NAMEIPMI=$NAME
    NAME=${NAME//-ipmi/}
    DEV=$NAME
elif [[ $NAME == *'-fez'* ]]; then
    NAME=${NAME//-fez/}
    DEV=$NAME
elif [[ $NAME == *'-ana'* ]]; then
    NAME=${NAME//-ana/}
fi

if  [[ $NAME == *rec* ]]; then
    if [[ $CMD == "off" ]] || [[ $CMD == "cycle" ]]; then
        echo "This is a recorder, better not to power cycle unless necessary, try to reset first. Quit? " "$NAME" "$CMD"; read -r ANSWER
        if [[ $ANSWER == 'y' ]] || [[ $ANSWER == 'Y' ]] || [[ $ANSWER == 'yes' ]]; then
            printf 'quit now\n'
            exit 0
        fi
    fi
fi

if [[ "${NAME,,}" == *drp* ]] && { [[ $CMD == "off" ]] || [[ $CMD == "cycle" ]]; }; then
    printf "serverStat %s is not supported for DRP nodes as the underlying psipmi power off or psipmi power cycle commands will disable the ipmi card. Instead, use the web interface as described on:\n\nhttps://confluence.slac.stanford.edu/display/PSDMInternal/Debugging+DAQ#DebuggingDAQ-IPMI\n" "$CMD"
    exit 1
fi

#check if this is a DAQ device
if [[ $ISSRV -lt 1 ]] && [[ $HUTCH != 'unknown_hutch' ]]; then
    if [[ $HUTCH == 'cxi' ]]; then # only supporting primary daq for now
        CNF="/reg/g/pcds/dist/pds/${HUTCH}/scripts/${HUTCH}_0.cnf"
    else
        CNF="/reg/g/pcds/dist/pds/${HUTCH}/scripts/${HUTCH}.cnf"
    fi

    if [[  $DEV =~ 'event' ]]; then
        DSSNODES=$(grep dss_nodes "$CNF" | grep -v '^#' | head -n1 | grep -oE "daq-$HUTCH-dss[[:digit:]]+")
        NEVENT=${DEV:5}  # grab the index (e.g. 2 if $DEV is event2)
        SEDNUM=$((NEVENT+1))  # adjust the number to correctly index the list of dssnodes with sed
        NAME=$(echo "$DSSNODES" | sed -n ${SEDNUM}p)
        if [[ -z $NAME ]]; then
            echo "dss node not found for $DEV, exiting..." >&2
            exit 1
        fi
    else
        NDEV=$(grep "$DEV" "$CNF" | grep -v '#' | grep -c host)
        if [ "$NDEV" -eq 1 ]; then
            NAME=$(grep "$DEV" "$CNF" | grep -v '#' | grep host | awk '{print $1}' | sed s/"{host:"//g | sed s/,// | sed s/_/-/g | sed s/\'//g | sed s/-fez//g)
        elif  [ "$NDEV" -eq 0 ]; then
            echo 'No device of this name found, exiting...' >&2
            exit 1
        else
            NAME=$(grep "$DEV'" "$CNF" | grep -v '#' | grep host | awk '{print $1}' | sed s/"{host:"//g | sed s/,// | sed s/_/-/g)
        fi
    fi
    if [[ $NAME ]]; then
        ISSRV=$(netconfig search "$NAME" | grep 'Found' | awk '{print $2}')
    fi
    if [[ $ISSRV -lt 1 ]]; then
        echo "Host ($NAME) not found in netconfig, exiting..." >&2
        exit 1
    fi

    SRVIP=$(netconfig search "$NAME" | grep IP: | awk '{print $2}')
    echo "server for $DEV is: $NAME"
else
    SRVIP=$(netconfig search "$DEV" | grep IP: | awk '{print $2}')
fi


names_from_name "$NAME"

if [[ $CMD == "off" ]]; then
    psipmi "$NAMEIPMI" power off
elif [[ $CMD == "on" ]]; then
    psipmi "$NAMEIPMI" power on
elif [[ $CMD == "cycle" ]]; then
    psipmi "$NAMEIPMI" power cycle
elif [[ $CMD == "console" ]]; then
    echo "To exit console use ~."
    psipmi "$NAMEIPMI" sol xterm &> /dev/null
elif [[ $CMD == "reset" ]]; then
    psipmi "$NAMEIPMI" power reset
elif [[ $CMD == "expert" ]]; then
    echo "Host netconfig entry:"
    echo -e "-------------------------------------------------"
    netconfig view "$NAME"
    echo -e ""
    echo -e "Checking IPMI power status:"
    echo -e "-------------------------------------------------"
    psipmi "$NAMEIPMI" power status
    echo -e ""
    echo -e "Checking host/ipmi/fez network interfaces are online:"
    echo -e "-------------------------------------------------"
    if ping -w 2 "$NAME" >/dev/null 2>&1; then
       echo "$NAME pings."
       CDS_ONLINE=1
    else
       echo "$NAME does not ping."
       CDS_ONLINE=0
    fi
    if ping -w 2 "$NAME"-ipmi >/dev/null 2>&1; then
       echo "$NAME-ipmi pings."
    else
       echo "$NAME-ipmi does not ping."
    fi
    if ping -w 2 "$NAME"-fez >/dev/null 2>&1; then
       echo "$NAME-fez pings."
    else
       echo "$NAME-fez does not ping."
    fi
    echo -e " "
    if [[ $CDS_ONLINE == 1 ]]; then
        ssh -qT "$NAME" <<EOF
            source /reg/g/pcds/setup/pcds_shortcuts.sh
            export PATH=\$PATH:/sbin/:/usr/sbin
            echo -e "Red Hat Version:"
            echo -e "-------------------------------------------------"
            uname -r | cut -d '.' -f 6
            echo -e ""
            echo -e "SLAC PCI Hardware:"
            echo -e "-------------------------------------------------"
            lspci | grep SLAC
            echo -e ""
            echo -e "Network PCI Hardware:"
            echo -e "-------------------------------------------------"
            lspci | grep Ethernet
            echo -e ""
            echo -e "Leutron PCI Hardware:"
            echo -e "-------------------------------------------------"
            echo -e ""
            if [[ -e /opt/EDTpdv/pciload ]]; then
               echo -e "EDT Cards:"
               echo -e "-------------------------------------------------"
               /opt/EDTpdv/pciload
            fi
            echo -e ""
            echo -e "IOC Processes:"
            echo -e "-------------------------------------------------"
            show_epics_sioc
EOF
    else
        echo "$NAME is offline.  Skipping internal checks."
        echo -e "-------------------------------------------------"
    fi
    echo -e ""
    echo -e "PCDS Drivers:"
    IOCSTARTUP="/reg/g/pcds/dist/pds/boot/$NAME"
    if [[ -e $IOCSTARTUP ]]; then
        echo "$IOCSTARTUP"
        echo -e "-------------------------------------------------"
        cat "$IOCSTARTUP"
    fi
    DAQSTARTUP="/reg/d/iocCommon/hosts/$NAME/startup.cmd"
    if [[ -e $DAQSTARTUP ]]; then
        echo -e "-------------------------------------------------"
        cat "$DAQSTARTUP"
    fi
elif [[ $CMD == "status" ]]; then
    ISON=$(psipmi "$NAMEIPMI" power status)
    if [[ $ISON == *off* ]]; then
        echo "$DEV is powered off"
        exit 0
    elif [[ $ISON == *on* ]]; then
        echo "$DEV is powered on"
    else
        echo "Cannot connect to $NAMEIPMI"
    fi

    PNG=$(ping -c 1 "$SRVIP" | grep transmitted | awk '{print $4}')
    if [ "$FEZNAME" ]; then
        if [[ $HOST_HAS_FEZ -ge 1 ]]; then
            PNGFEZ=$(ping -c 1 "$FEZNAME" | grep transmitted | awk '{print $4}')
            echo "$NAME is a server with IP: $CDSIP (ping success: $PNG), $FEZIP (ping success: $PNGFEZ)"
            if [[ $((PNG+PNGFEZ)) -gt 1 ]]; then
                echo 'cds&fez interfaces are up'
            fi
        else
            echo "$NAME is a server with IP: $CDSIP (ping success: $PNG), $FEZIP (cannot ping from machine without fez)"
            if [ "$PNG" -gt 0 ]; then
                echo 'cds interface is up'
            fi
        fi
    else
        echo "$DEV is a server with IP: $CDSIP (ping success: $PNG)"
        if [ "$PNG" -gt 0 ]; then
            echo 'cds interface is up'
        fi
    fi
else
    echo "this should not happen: unrecognized command $CMD not caught"
fi
